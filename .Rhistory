detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
library("utils", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("stats", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.0.2/library")
?lm
?dgamma
?colSums
?predict
?showMethods()
?getMethods()
?getS3Method()
?getClass()
library("knitr", lib.loc="~/R/win-library/3.0")
library("stringr", lib.loc="~/R/win-library/3.0")
current <- getwd()
library(stringr)
MSOffice_exportTest <- read.csv("~/MSOffice_exportTest.csv", stringsAsFactors=FALSE)
View(MSOffice_exportTest)
returnFile <- returnFile[-1,]
rm(MSOffice_exportTest)
returnFile <- read.csv("~/MSOffice_exportTest.csv", stringsAsFactors=FALSE)
returnFile <- returnFile[-1,]
?gsub
trouble <- c(™", "©", "®")
trouble <- c("™", "©", "®")
str(returnFile)
newNames <- returnFile$i..NAme
newNames <- returnFile$i..Name
colnames(returnFile)[1]
returnFile$ï..Name
newNames <- returnFile$ï..Name
lapply(newNames, function(x) gsub(trouble[1],"",x))
sum(newNames != returnFile$ï..Name)
newNames <- lapply(newNames, function(x) gsub("™","",x))
sum(newNames != returnFile$ï..Name)
newNames["™" %in% newNames]
sum("™" %in% newNames)
sum("©" %in% newNames)
newNames[17290:17300]
newNames[3535:3540]
newNames[3435:3440]
newNames[3430:3440]
newNames[3330:3440]
newNames[3420:3440]
newNames[3420]
newNames[8767]
newNames <- lapply(newNames, function(x) gsub("â„¢","",x))
sum(newNames != returnFile$ï..Name)
newNames <- lapply(newNames, function(x) gsub("Â®","",x))
sum(newNames != returnFile$ï..Name)
newNames <- lapply(newNames, function(x) gsub("%","pct",x))
sum(newNames != returnFile$ï..Name)
library("Quandl", lib.loc="~/R/win-library/3.0")
Quandl("YAHOO/INDEX_GSPC", trim_start="1950-01-03", trim_end="2014-09-05",
authcode="3LpJ3vz9eqRsM7PFP2vw")
Quandl.limit()
sp5 <- Quandl("YAHOO/INDEX_GSPC", trim_start="1950-01-03", trim_end="2014-09-05",
authcode="3LpJ3vz9eqRsM7PFP2vw")
ls()
files_to_remove <- ls()
for (1 in 1:44){
if (files_to_remove[i] != "sp5" && files_to_remove[i] != "files_to_remove")
show(files_to_remove[i])
}
for (i in 1:44){
if (files_to_remove[i] != "sp5" && files_to_remove[i] != "files_to_remove")
show(files_to_remove[i])
}
for (i in 1:44){
if (files_to_remove[i] != "sp5" && files_to_remove[i] != "files_to_remove")
rm(files_to_remove[i])
}
files_to_remove <- ls()
objects_to_remove <- ls()
for (i in 1:46){
if (objects_to_remove[i] !(%in% c("sp5", "objects_to_remove"))){
show(objects_to_remove[i])
}
for (i in 1:46){
if (objects_to_remove[i] !(%in% c("sp5", "objects_to_remove"))){
show(objects_to_remove[i])
}
}
objects_to_keep <- c("sp", "objects_to_keep")
objects <- ls()
for (i in 1:48){
if (objects[i] %in% objects_to_keep){
next
} else {
show(objects[i])
}
}
objects <- ls()
objects_to_keep <- c("sp", "objects_to_keep")
objects_to_remove <- objects[!(objects %in% objects_to_keep)]
objects_to_remove <- objects[-(objects %in% objects_to_keep)]
for (i in 1:48){
nextObject <- objects_to_remove
if (nextObject %in% objects_to_keep){
next
} else {
show(paste("rm(", nextObject, sep = ""))
}
}
for (i in 1:48){
nextObject <- objects_to_remove
if (nextObject %in% objects_to_keep){
next
} else {
show(paste0("rm(", nextObject, ")" sep = ""))
}
}
for (i in 1:48){
nextObject <- objects_to_remove
if (nextObject %in% objects_to_keep){
next
} else {
show(paste0("rm(", nextObject, ")", sep = ""))
}
}
warnings()
for (i in 1:48){
nextObject <- objects_to_remove[i]
if (nextObject %in% objects_to_keep){
next
} else {
show(paste0("rm(", nextObject, ")", sep = ""))
}
}
?cat
for (i in 1:48){
nextObject <- objects_to_remove[i]
if (nextObject %in% objects_to_keep){
next
} else {
cat("rm(", nextObject, ")", sep = "")
}
}
?eval
for (i in 1:48){
nextObject <- objects_to_remove[i]
if (nextObject %in% objects_to_keep){
next
} else {
eval(cat("rm(", nextObject, ")", sep = ""))
}
}
ls()
library(reshape2)
library(plyr)
df <- read.csv("./data/beer_reviews.csv")
library(reshape2)
library(plyr)
df <- read.csv("./data/beer_reviews.csv")
head(df)
n <- 100
beer_counts <- table(df$beer_name)
beers <- names(beer_counts[beer_counts > n])
df <- df[df$beer_name %in% beers,]
ECOV <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)
View(ECOV)
covAC2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[3:11, 2:10]
covAC2010 == t(covAC2010)
port2010 <- diag(read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23])
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
sqrt(diag(port2010))
port2010 == t(port2010)
diag(port2010)
port2010 <- matrix(read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23])
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
colnames(port2010) <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7" )
?diag()
diag(port2010)
port2010 <- unlist(port2010)
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
colnames(port2010) <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7" )
port2010 <- as.matrix(unlist(port2010), nrow = 7, ncol = 7)
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
port2010 <- matrix(unlist(port2010), nrow = 7, ncol = 7)
colnames(port2010) <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7" )
diag(port2010)
sqrt(diag(port2010))
retAC2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[1, 2:10]
targets_exposures <- read.csv("~/InvCommittee/portfolio_monitoring_thresholds/targets_exposures.csv")
View(targets_exposures)
targets_exposures <- read.csv("~/InvCommittee/portfolio_monitoring_thresholds/targets_exposures.csv")
clients <- colnames(targets_exposures)[4:6]
targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0
deviations <- targets_exposures[targets_exposures$Portfolio == 7, 4:6] - targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0
show(deviations)
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
covAC2010 <- matrix(unlist(read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[3:11, 2:10]), nrow = 9, ncol = 9)
retAC2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[1, 2:10]
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
deviations <- matrix(unlist(targets_exposures[targets_exposures$Portfolio == 7, 4:6] - targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0), nrow = 7, ncol = 3)
show(deviations)
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
show(deviations)
targets_exposures
deviations <- matrix(unlist(targets_exposures[targets_exposures$Portfolio == 7, 4:6] - targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0), nrow = 9, ncol = 3)
show(deviations)
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
show(deviations)
covAC2010 %*% deviations
t(deviations) %*% (covAC2010 %*% deviations)
trackingError <- sqrt(diag(t(deviations) %*% (covAC2010 %*% deviations) ))
names(trackingError) <- clients
show(trackingError)
show(deviations)
?show
library(scales)
percent(show(trackingError))
percent(trackingError))
percent(trackingError)
percent(deviations)
show(cbind(clients,percent(trackingError)))
teTable <- cbind(clients,percent(trackingError))
colnames(teTable)[2] <- "Tracking Error"
teTable
contributions <- covAC2010 %*% deviations
colnames(contributions) <- clients
rownames(contributions)
rownames(contributions) <- seq(1:9)
rownames(contributions)
contributions
percent(contributions)
apply(contributions, 2, percent)
contributions <- deviations * (covAC2010 %*% deviations)
colnames(contributions) <- clients
rownames(contributions) <- seq(1:9)
apply(contributions, 2, percent)
apply(deviations, 2, percent)
colnames(deviations) <- clients
apply(deviations, 2, percent)
targets_exposures
targets_exposures[1:9,1:3]
deviations <- matrix(unlist(targets_exposures[1:9, 4:6] - targets_exposures[1:9, 3]/100.0), nrow = 9, ncol = 3)
deviations
targets_exposures[1:9, 3]/100.0
targets_exposures <- read.csv("~/InvCommittee/portfolio_monitoring_thresholds/targets_exposures.csv")[1:9,]
order(target_exposures[,2])
order(target_exposures[,2])
order(target_exposures[,2])
order(targets_exposures[,2])
targets_exposures <- targets_exposures[order(targets_exposures[,2]), ]
clients <- colnames(targets_exposures)[4:6]
deviations <- matrix(unlist(targets_exposures[, 4:6] - targets_exposures[, 3]/100.0), nrow = 9, ncol = 3)
trackingError <- sqrt(diag(t(deviations) %*% (covAC2010 %*% deviations) ))
names(trackingError) <- clients
teTable <- cbind(clients,percent(trackingError))
colnames(teTable)[2] <- "Tracking Error"
teTable
contributions <- deviations * (covAC2010 %*% deviations)
colnames(contributions) <- clients
rownames(contributions) <- seq(1:9)
apply(contributions, 2, percent)
colnames(deviations) <- clients
apply(deviations, 2, percent)
library("dplyr", lib.loc="~/R/win-library/3.0")
location(iris)
iris2 <- iris
location(iris2)
changes(iris2, iris)
iris2$Sepal.Length <- iris2$Sepal.Length * 2
changes(iris, iris2)
iris3 <- mutate(iris, Sepal.Length = Sepal.Length * 2)
changes(iris3, iris)
summarise(per_day, flights = sum(flights))
library(hflights)
str(hflights)
library(Lahman)
batting <- select(tbl_df(Batting), playerID, yearID, teamID, G, AB:H)
batting <- arrange(batting, playerID, yearID, teamID)
players <- group_by(batting, playerID)
filter(players, min_rank(desc(H)) <= 2 & H > 0)
mutate(players, G_rank = min_rank(G))
filter(players, G > lag(G))
mutate(players, G_change = (G - lag(G)) / (yearID - lag(yearID)))
filter(players, G > mean(G))
mutate(players, G_z = (G - mean(G)) / sd(G))
install.packages("stockReturns")
install.packages("stockPortfolio")
library("stockPortfolio", lib.loc="~/R/win-library/3.0")
getReturns("ticker"^GSPC", freq = c("month", "week", "day"),
get = c("overlapOnly", "all"), start = "1950-01-01", end = NULL)
getReturns("ticker"^GSPC", freq = "month",
getReturns("^GSPC", freq = "month",
get = c("overlapOnly", "all"), start = "1950-01-01", end = NULL)
getReturns("^GSPC", freq = "month",
get = c("overlapOnly", "all"), start = "1970-01-01", end = NULL)
getReturns("GLD", freq = "month",
get = c("overlapOnly", "all"), start = "2014-03-31", end = NULL)
getReturns("GLD", freq = "month",
get = "overlapOnly", start = "2014-03-31", end = NULL)
get = "all", start = "2014-03-31", end = NULL)
getReturns("GLD", freq = "month",
get = "all", start = "2014-03-31", end = NULL)
getReturns("GLD", freq = "month",
get = "all", start = "2014-03-31", end = "NULL"2014-08-31)
get = "all", start = "2014-03-31", end = "2014-08-31")
getReturns("GLD", freq = "month",
get = "all", start = "2014-03-31", end = "2014-08-31")
stock94Info
data(stock94Info)
head(stock94Info)
stock94Info
library(zoo)
library(tseries)
install.packages("tseries")
library(tseries)
spComp <- read.csv("raw_data/sp500_constituents.csv" )
spComp <- read.csv("https://www.dropbox.com/s/vei2cbxy0kfulqv/sp500_constituents.csv" )
detach("package:stockPortfolio", unload=TRUE)
hflights_df <- tbl_df(hflights)
hflights_df
filter(hflights_df, Month == 1, DayofMonth == 1)
summarise(hflights_df,
delay = mean(DepDelay, na.rm = TRUE))
library(nycflights)
library(hflights13)
library(nycflights13)
install.packages("nycflights13")
library("devtools", lib.loc="~/R/win-library/3.0")
install_github(nycflights13)
install_github("nycflights13")
library("ggplot2", lib.loc="~/R/win-library/3.0")
weights <- c(.30, .21, .16, .12, .12, .09 )
sum(weights)
assets <- c("Treasuries",
"TIPS",
"Corp. Bonds",
"US Stocks",
"Int'l Stocks",
"Commodities")
volatilities <- c(0.07, 0.1, 0.12, 0.2, 0.2, 0.3)
correlations <- matrix(cbind(c(1.00,0.95,0.60,0.10,0.10,0.10),
c(0.95,1.00,0.65,0.10,0.10,0.10),
c(0.60,0.65,1.00,0.35,0.35,0.20),
c(0.10,0.10,0.35,1.00,0.70,0.10),
c(0.10,0.10,0.35,0.70,1.00,0.15),
c(0.10,0.10,0.20,0.10,0.15,1.00)), nrow = 6,
ncol = 6)
covariances <- correlations * (volatilities %*% t(volatilities))
weights <- c(.30, .21, .16, .12, .12, .09 )
assets <- c("Treasuries",
"TIPS",
"Corp. Bonds",
"US Stocks",
"Int'l Stocks",
"Commodities")
volatilities <- c(0.07, 0.1, 0.12, 0.2, 0.2, 0.3)
correlations <- matrix(cbind(c(1.00,0.95,0.60,0.10,0.10,0.10),
c(0.95,1.00,0.65,0.10,0.10,0.10),
c(0.60,0.65,1.00,0.35,0.35,0.20),
c(0.10,0.10,0.35,1.00,0.70,0.10),
c(0.10,0.10,0.35,0.70,1.00,0.15),
c(0.10,0.10,0.20,0.10,0.15,1.00)), nrow = 6,
ncol = 6)
covariances <- correlations * (volatilities %*% t(volatilities))
contributions <- weights * (covariances %*% weights)
heatmap(contributions, labRow = assets)
risk <- matrix(cbind(weights, contributions), nrow = 6, ncol = 2)
heatmap(risk, labRow = assets)
library("knitr", lib.loc="~/R/win-library/3.0")
library(knitr)
setwd("~/GitHub/Reproducible_2")
setwd("~/GitHub/Reproducible_2")
library(knitr)
stormData <- read.csv("repdata-data-StormData.csv.bz2", stringsAsFactors
= FALSE)
dim(stormData)
length(table(stormData$EVTYPE))
library(knitr)
annual_CPI <- read.csv("annual_CPI.csv")
cpiDeflator <- annual_CPI$CPI/annual_CPI$CPI[annual_CPI$Year == 2011]
cpiDeflator <- data.frame(cbind(annual_CPI$Year, cpiDeflator))
colnames(cpiDeflator) <- c("Year", "Deflator")
require(lubridate);library(knitr)
stormData$YEAR <- year(strptime(stormData$BGN_DATE, "%m/%d/%Y %H:%M:%S"))
x<-c(0, 5, 30, 80, 1000)
y<-c(150, 2000, 2010, 3000)
grd <- expand.grid(x=x, y=y)
z<-matrix(grd$x*2-grd$y*3, nrow=length(x), ncol=length(y), byrow=TRUE)
image(x=x, y=y, z=z, col=rainbow(20))
source("http://menugget.blogspot.de/2011/08/adding-scale-to-image-plot.html/image.scale.r") #http://menugget.blogspot.de/2011/08/adding-scale-to-image-plot.html
setwd("~/")
source("image.scale.r") #http://menugget.blogspot.de/2011/08/adding-scale-to-image-plot.html
x11(width=5, height=4)
layout(matrix(1:2, nrow=1, ncol=2), widths=c(4,1), heights=4, respect=TRUE)
layout.show(2)
par(mar=c(4,4,1,1))
image(x=x, y=y, z=z, col=rainbow(20))
par(mar=c(4,0,1,4))
image.scale(z, col=rainbow(20), horiz=FALSE, xlab="", ylab="", xaxt="n", yaxt="n")
axis(4)
box()
x<-c(0, 5, 30, 80, 1000)
y<-c(150, 2000, 2010, 3000)
grd <- expand.grid(x=x, y=y)
z<-matrix(grd$x*2-grd$y*3, nrow=length(x), ncol=length(y), byrow=TRUE)
image(x=x, y=y, z=z, col=rainbow(20))
source("image.scale.r") #http://menugget.blogspot.de/2011/08/adding-scale-to-image-plot.html
x11(width=5, height=4)
layout(matrix(1:2, nrow=1, ncol=2), widths=c(4,1), heights=4, respect=TRUE)
layout.show(2)
par(mar=c(4,4,1,1))
image(x=x, y=y, z=z, col=rainbow(20))
install.packages("portfolio")
install.packages("PortRisk")
library("portfolio", lib.loc="~/R/win-library/3.0")
data(dow.jan.2005)
p <- new("portfolioBasic",
id.var = "symbol",
in.var = "price",
sides = "long",
ret.var = "month.ret",
data = dow.jan.2005)
summary(p)
exposure(p, exp.var = c("price", "sector"))
performance(p)
contribution(p, contrib.var = c("cap.bil", "sector"))
map.market(id    = dow.jan.2005$symbol,
area  = dow.jan.2005$price,
group = dow.jan.2005$sector,
color = 100 * dow.jan.2005$month.ret)
weights <- c(.30, .21, .16, .12, .12, .09 )
assets <- c("Treasuries",
"TIPS",
"Corp. Bonds",
"US Stocks",
"Int'l Stocks",
"Commodities")
volatilities <- c(0.07, 0.1, 0.12, 0.2, 0.2, 0.3)
correlations <- matrix(cbind(c(1.00,0.95,0.60,0.10,0.10,0.10),
c(0.95,1.00,0.65,0.10,0.10,0.10),
c(0.60,0.65,1.00,0.35,0.35,0.20),
c(0.10,0.10,0.35,1.00,0.70,0.10),
c(0.10,0.10,0.35,0.70,1.00,0.15),
c(0.10,0.10,0.20,0.10,0.15,1.00)), nrow = 6,
ncol = 6)
covariances <- correlations * (volatilities %*% t(volatilities))
contributions <- weights * (covariances %*% weights)
map.market(id    = assets,
area  = contributions,
group = assets,
color = 100 * correlations[,1])
map.market(id    = assets,
area  = contributions,
group = assets,
color = -100 * correlations[,1])
map.market(id    = assets,
area  = contributions,
group = assets,
color = -100 * correlations[,4])
map.market(id    = assets,
area  = contributions,
group = assets,
color = -100 * correlations[,6])
map.market(id    = assets,
area  = contributions,
group = assets,
color = -100 * correlations[,5])
map.market(id    = assets,
area  = contributions,
group = assets, main = NULL,
color = -100 * correlations[,5])
betas <- covariances %*% weights
contributions <- weights * betas
map.market(id    = assets,
area  = contributions,
group = assets, main = NULL,
color = -100 * betas)
setwd("~/GitHub/portfolioRiskVis")
runApp()
library("shiny", lib.loc="~/R/win-library/3.0")
runApp()
assets <- c("Treasuries",
"TIPS",
"Corp. Bonds",
"US Stocks",
"Int'l Stocks",
"Commodities")
volatilities <- c(0.07, 0.1, 0.12, 0.2, 0.2, 0.3)
correlations <- matrix(cbind(c(1.00,0.95,0.60,0.10,0.10,0.10),
c(0.95,1.00,0.65,0.10,0.10,0.10),
c(0.60,0.65,1.00,0.35,0.35,0.20),
c(0.10,0.10,0.35,1.00,0.70,0.10),
c(0.10,0.10,0.35,0.70,1.00,0.15),
c(0.10,0.10,0.20,0.10,0.15,1.00)), nrow = 6,
ncol = 6)
covariances <- correlations * (volatilities %*% t(volatilities))
axisLabels <- seq(0, 1.0, .05)
weights <- c(.3026, .2085, .1570, .1184, .1156, .0979)
betas <- covariances %*% weights
wcov <- covariances %*% weights
portVar <- t(weights) %*% wcov
portSD <- sqrt(portVar)
betas <- wcov / portVar
betas <- wcov / portVar[1,1]
portVar <- (t(weights) %*% wcov)[1,1]
portSD <- sqrt(portVar)
betas <- wcov / portVar
shiny::runApp()
library("devtools", lib.loc="~/R/win-library/3.0")
install_github(rstudio/shinyapps)
install_github("rstudio/shinyapps")
library("shinyapps", lib.loc="~/R/win-library/3.0")
runApp()
