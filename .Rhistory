shiny::runApp('GitHub/portfolioRiskVis')
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
getwd()
setwd("~/GitHub/portfolioRiskVis")
shinyapps::setAccountInfo(name='mcarlo', token='ADC97CF366048E8CEFCF14847F986994', secret='Y2WIBgyFDZk/0UzCc7J8+lUsoFcf8kgpkn/hOgCb')
?runApp
runApp(display.mode = "normal")
runApp(display.mode = "normal")
shiny::runApp()
shiny::runApp()
shiny::runApp()
riskParity <- (solve(covariances, Volatility)/sum(solve(covariances, Volatility)))*100
Asset <- c("US Stocks","Int'l Stocks","Bonds","REITs","Commodities")
Volatility <- c(0.2, .25, .05, .25, .25)
Expected_Return <- c(0.085, .08, .02, .075, .05)
volDF <- data.frame(cbind(Volatility, Expected_Return))
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.95, 0.15, 0.85, 0.6),
c(0.95, 1, 0.3, 0.8, 0.7),
c(0.15, 0.3, 1, 0.25, 0.05),
c(0.85, 0.8, 0.25, 1, 0.45),
c(0.6, 0.7, 0.05, 0.45, 1)), nrow = 5)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
maxSharpe <- (solve(covariances, Expected_Return)/sum(solve(covariances, Expected_Return)))*100
minVar <- ((solve(covariances)%*%rep(1, 5))[,1]/sum(solve(covariances)%*%rep(1, 5)))*100
riskParity <- (solve(covariances, Volatility)/sum(solve(covariances, Volatility)))*100
riskParity2 <- (solve(covariances, Volatility)/sum(solve(covariances, Volatility)))*100
riskParity <- c(10.0513601776988, 7.43196185269416, 64.187314312573,
8.39451719877827, 9.9348464582568)
barplot(riskParity, riskParity2)
barplot(riskParity)
barplot(riskParity2)
riskParity2 <- (solve(covariances, Expected_Return/Volatility)/sum(solve(covariances, Expected_Return/Volatility)))*100
barplot(riskParity2)
data <- read.csv("~/week5.csv", header=F)
winprob <- data[,1]
confidence<-data[,2]
games<-length(winprob)
weeks<-17
sims<-100000
points<-rep(0,sims)
totUpsets <- rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
#upsets<-1*(runif(weeks,0,1)>=season)
points[i]<-sum(outcomes*confidence)
#totUpsets[i]<-sum(upsets)
}
quantile(points,c(.025,.5,.975))
shiny::runApp('miralb83')
getSymbols("ZIV", from="1990-01-01")
library("quadprog", lib.loc="~/R/win-library/3.0")
getSymbols("ZIV", from="1990-01-01")
library("quantmod", lib.loc="~/R/win-library/3.0")
getSymbols("ZIV", from="1990-01-01")
getSymbols("TMF", from="1990-01-01")
tmfRets <- Return.calculate(Cl(TMF))
library("PerformanceAnalytics", lib.loc="~/R/win-library/3.0")
tmfRets <- Return.calculate(Cl(TMF))
xivRets <- Return.calculate(Ad(ZIV))
both <- merge(xivRets, tmfRets, join='inner')
colnames(both) <- c("ziv", "tmf")
portfRets <- Return.rebalancing(both, weights=c(.4, .6),
rebalance_on="weeks", geometric=FALSE)
colnames(portfRets) <- "ZIVTMF"
getSymbols("SPY", from="1990-01-01")
SPYrets <- diff(log(Cl(SPY)))
charts.PerformanceSummary(merge(portfRets, SPYrets, join='inner'))
getSymbols("xiv", from="1990-01-01")
tmfRets <- Return.calculate(Cl(TMF))
xivRets <- Return.calculate(Ad(xiv))
getSymbols("XIV", from="1990-01-01")
xivRets <- Return.calculate(Ad(xiv))
xivRets <- Return.calculate(Ad(XIV))
both <- merge(xivRets, tmfRets, join='inner')
colnames(both) <- c("xiv", "tmf")
portfRets <- Return.rebalancing(both, weights=c(.4, .6),
rebalance_on="weeks", geometric=FALSE)
colnames(portfRets) <- "xivTMF"
getSymbols("SPY", from="1990-01-01")
SPYrets <- diff(log(Cl(SPY)))
charts.PerformanceSummary(merge(portfRets, SPYrets, join='inner'))
sd(xivRets)
str(xivRets)
sd(xivRets[,1])
VolatilitySkewness(zivRets)
zivRets <- Return.calculate(Ad(ZIV))
VolatilitySkewness(zivRets)
xivRets <- Return.calculate(Ad(XIV))
VolatilitySkewness(xivRets)
VolatilitySkewness(xivRets, MAR = -1, state = "volatility")
VolatilitySkewness(xivRets, state = "volatility")
VolatilitySkewness(zivRets, state = "volatility")
VolatilitySkewness(tmfRets, state = "volatility")
cor(zivRets, xivRets)
?portRets
?portfRets
?Return.rebalancing
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
library("shinyapps", lib.loc="~/R/win-library/3.0")
setwd("~/GitHub/portfolioRiskVis")
shiny::runApp()
