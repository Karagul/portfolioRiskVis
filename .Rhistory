files_to_remove <- ls()
for (1 in 1:44){
if (files_to_remove[i] != "sp5" && files_to_remove[i] != "files_to_remove")
show(files_to_remove[i])
}
for (i in 1:44){
if (files_to_remove[i] != "sp5" && files_to_remove[i] != "files_to_remove")
show(files_to_remove[i])
}
for (i in 1:44){
if (files_to_remove[i] != "sp5" && files_to_remove[i] != "files_to_remove")
rm(files_to_remove[i])
}
files_to_remove <- ls()
objects_to_remove <- ls()
for (i in 1:46){
if (objects_to_remove[i] !(%in% c("sp5", "objects_to_remove"))){
show(objects_to_remove[i])
}
for (i in 1:46){
if (objects_to_remove[i] !(%in% c("sp5", "objects_to_remove"))){
show(objects_to_remove[i])
}
}
objects_to_keep <- c("sp", "objects_to_keep")
objects <- ls()
for (i in 1:48){
if (objects[i] %in% objects_to_keep){
next
} else {
show(objects[i])
}
}
objects <- ls()
objects_to_keep <- c("sp", "objects_to_keep")
objects_to_remove <- objects[!(objects %in% objects_to_keep)]
objects_to_remove <- objects[-(objects %in% objects_to_keep)]
for (i in 1:48){
nextObject <- objects_to_remove
if (nextObject %in% objects_to_keep){
next
} else {
show(paste("rm(", nextObject, sep = ""))
}
}
for (i in 1:48){
nextObject <- objects_to_remove
if (nextObject %in% objects_to_keep){
next
} else {
show(paste0("rm(", nextObject, ")" sep = ""))
}
}
for (i in 1:48){
nextObject <- objects_to_remove
if (nextObject %in% objects_to_keep){
next
} else {
show(paste0("rm(", nextObject, ")", sep = ""))
}
}
warnings()
for (i in 1:48){
nextObject <- objects_to_remove[i]
if (nextObject %in% objects_to_keep){
next
} else {
show(paste0("rm(", nextObject, ")", sep = ""))
}
}
?cat
for (i in 1:48){
nextObject <- objects_to_remove[i]
if (nextObject %in% objects_to_keep){
next
} else {
cat("rm(", nextObject, ")", sep = "")
}
}
?eval
for (i in 1:48){
nextObject <- objects_to_remove[i]
if (nextObject %in% objects_to_keep){
next
} else {
eval(cat("rm(", nextObject, ")", sep = ""))
}
}
ls()
library(reshape2)
library(plyr)
df <- read.csv("./data/beer_reviews.csv")
library(reshape2)
library(plyr)
df <- read.csv("./data/beer_reviews.csv")
head(df)
n <- 100
beer_counts <- table(df$beer_name)
beers <- names(beer_counts[beer_counts > n])
df <- df[df$beer_name %in% beers,]
ECOV <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)
View(ECOV)
covAC2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[3:11, 2:10]
covAC2010 == t(covAC2010)
port2010 <- diag(read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23])
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
sqrt(diag(port2010))
port2010 == t(port2010)
diag(port2010)
port2010 <- matrix(read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23])
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
colnames(port2010) <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7" )
?diag()
diag(port2010)
port2010 <- unlist(port2010)
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
colnames(port2010) <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7" )
port2010 <- as.matrix(unlist(port2010), nrow = 7, ncol = 7)
port2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[18:24, 17:23]
port2010 <- matrix(unlist(port2010), nrow = 7, ncol = 7)
colnames(port2010) <- c("Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7" )
diag(port2010)
sqrt(diag(port2010))
retAC2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[1, 2:10]
targets_exposures <- read.csv("~/InvCommittee/portfolio_monitoring_thresholds/targets_exposures.csv")
View(targets_exposures)
targets_exposures <- read.csv("~/InvCommittee/portfolio_monitoring_thresholds/targets_exposures.csv")
clients <- colnames(targets_exposures)[4:6]
targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0
deviations <- targets_exposures[targets_exposures$Portfolio == 7, 4:6] - targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0
show(deviations)
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
covAC2010 <- matrix(unlist(read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[3:11, 2:10]), nrow = 9, ncol = 9)
retAC2010 <- read.table("C:/userdata/ECOV.out", quote="\"", stringsAsFactors=FALSE)[1, 2:10]
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
deviations <- matrix(unlist(targets_exposures[targets_exposures$Portfolio == 7, 4:6] - targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0), nrow = 7, ncol = 3)
show(deviations)
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
show(deviations)
targets_exposures
deviations <- matrix(unlist(targets_exposures[targets_exposures$Portfolio == 7, 4:6] - targets_exposures[targets_exposures$Portfolio == 7, 3]/100.0), nrow = 9, ncol = 3)
show(deviations)
trackingError <- sqrt(t(deviations) %*% (covAC2010 %*% deviations) )
show(deviations)
covAC2010 %*% deviations
t(deviations) %*% (covAC2010 %*% deviations)
trackingError <- sqrt(diag(t(deviations) %*% (covAC2010 %*% deviations) ))
names(trackingError) <- clients
show(trackingError)
show(deviations)
?show
library(scales)
percent(show(trackingError))
percent(trackingError))
percent(trackingError)
percent(deviations)
show(cbind(clients,percent(trackingError)))
teTable <- cbind(clients,percent(trackingError))
colnames(teTable)[2] <- "Tracking Error"
teTable
contributions <- covAC2010 %*% deviations
colnames(contributions) <- clients
rownames(contributions)
rownames(contributions) <- seq(1:9)
rownames(contributions)
contributions
percent(contributions)
apply(contributions, 2, percent)
contributions <- deviations * (covAC2010 %*% deviations)
colnames(contributions) <- clients
rownames(contributions) <- seq(1:9)
apply(contributions, 2, percent)
apply(deviations, 2, percent)
colnames(deviations) <- clients
apply(deviations, 2, percent)
targets_exposures
targets_exposures[1:9,1:3]
deviations <- matrix(unlist(targets_exposures[1:9, 4:6] - targets_exposures[1:9, 3]/100.0), nrow = 9, ncol = 3)
deviations
targets_exposures[1:9, 3]/100.0
targets_exposures <- read.csv("~/InvCommittee/portfolio_monitoring_thresholds/targets_exposures.csv")[1:9,]
order(target_exposures[,2])
order(target_exposures[,2])
order(target_exposures[,2])
order(targets_exposures[,2])
targets_exposures <- targets_exposures[order(targets_exposures[,2]), ]
clients <- colnames(targets_exposures)[4:6]
deviations <- matrix(unlist(targets_exposures[, 4:6] - targets_exposures[, 3]/100.0), nrow = 9, ncol = 3)
trackingError <- sqrt(diag(t(deviations) %*% (covAC2010 %*% deviations) ))
names(trackingError) <- clients
teTable <- cbind(clients,percent(trackingError))
colnames(teTable)[2] <- "Tracking Error"
teTable
contributions <- deviations * (covAC2010 %*% deviations)
colnames(contributions) <- clients
rownames(contributions) <- seq(1:9)
apply(contributions, 2, percent)
colnames(deviations) <- clients
apply(deviations, 2, percent)
library("dplyr", lib.loc="~/R/win-library/3.0")
location(iris)
iris2 <- iris
location(iris2)
changes(iris2, iris)
iris2$Sepal.Length <- iris2$Sepal.Length * 2
changes(iris, iris2)
iris3 <- mutate(iris, Sepal.Length = Sepal.Length * 2)
changes(iris3, iris)
summarise(per_day, flights = sum(flights))
library(hflights)
str(hflights)
library(Lahman)
batting <- select(tbl_df(Batting), playerID, yearID, teamID, G, AB:H)
batting <- arrange(batting, playerID, yearID, teamID)
players <- group_by(batting, playerID)
filter(players, min_rank(desc(H)) <= 2 & H > 0)
mutate(players, G_rank = min_rank(G))
filter(players, G > lag(G))
mutate(players, G_change = (G - lag(G)) / (yearID - lag(yearID)))
filter(players, G > mean(G))
mutate(players, G_z = (G - mean(G)) / sd(G))
install.packages("stockReturns")
install.packages("stockPortfolio")
library("stockPortfolio", lib.loc="~/R/win-library/3.0")
getReturns("ticker"^GSPC", freq = c("month", "week", "day"),
get = c("overlapOnly", "all"), start = "1950-01-01", end = NULL)
getReturns("ticker"^GSPC", freq = "month",
getReturns("^GSPC", freq = "month",
get = c("overlapOnly", "all"), start = "1950-01-01", end = NULL)
getReturns("^GSPC", freq = "month",
get = c("overlapOnly", "all"), start = "1970-01-01", end = NULL)
getReturns("GLD", freq = "month",
get = c("overlapOnly", "all"), start = "2014-03-31", end = NULL)
getReturns("GLD", freq = "month",
get = "overlapOnly", start = "2014-03-31", end = NULL)
get = "all", start = "2014-03-31", end = NULL)
getReturns("GLD", freq = "month",
get = "all", start = "2014-03-31", end = NULL)
getReturns("GLD", freq = "month",
get = "all", start = "2014-03-31", end = "NULL"2014-08-31)
get = "all", start = "2014-03-31", end = "2014-08-31")
getReturns("GLD", freq = "month",
get = "all", start = "2014-03-31", end = "2014-08-31")
stock94Info
data(stock94Info)
head(stock94Info)
stock94Info
library(zoo)
library(tseries)
install.packages("tseries")
library(tseries)
spComp <- read.csv("raw_data/sp500_constituents.csv" )
spComp <- read.csv("https://www.dropbox.com/s/vei2cbxy0kfulqv/sp500_constituents.csv" )
detach("package:stockPortfolio", unload=TRUE)
hflights_df <- tbl_df(hflights)
hflights_df
filter(hflights_df, Month == 1, DayofMonth == 1)
summarise(hflights_df,
delay = mean(DepDelay, na.rm = TRUE))
library(nycflights)
library(hflights13)
library(nycflights13)
install.packages("nycflights13")
library("devtools", lib.loc="~/R/win-library/3.0")
install_github(nycflights13)
install_github("nycflights13")
install.packages("nleqslv")
library("nleqslv", lib.loc="~/R/win-library/3.0")
library(nleqslv)
T <- 1
D1 <- 1000
R <- 0.01
sigmaS <- .1
SO1 <- 1000
fnewton <- function(x){
y <- numeric(2)
d1 <- (log(x[1]/D1)+(R+x[2]^2/2)*T)/x[2]*sqrt(T)
d2 <- d1-x[2]*sqrt(T)
y[1] <- SO1 - (x[1]*pnorm(d1) - exp(-R*T)*D1*pnorm(d2))
y[2] <- sigmaS*SO1 - pnorm(d1)*x[2]*x[1]
y
}
xstart <- c(21623379, 0.526177094846878)
nleqslv(xstart, fnewton, control=list(btol=.01), method="Newton")
assets <- c("Treasuries",
"TIPS",
"Corp. Bonds",
"US Stocks",
"Int'l Stocks",
"Commodities")
volatilities <- c(0.07, 0.1, 0.12, 0.2, 0.2, 0.3)
correlations <- matrix(cbind(c(1.00,0.95,0.60,0.10,0.10,0.10),
c(0.95,1.00,0.65,0.10,0.10,0.10),
c(0.60,0.65,1.00,0.35,0.35,0.20),
c(0.10,0.10,0.35,1.00,0.70,0.10),
c(0.10,0.10,0.35,0.70,1.00,0.15),
c(0.10,0.10,0.20,0.10,0.15,1.00)), nrow = 6,
ncol = 6)
covariances <- correlations * (volatilities %*% t(volatilities))
weights <- c(.3026, .2085, .1570, .1184, .1156, .0979)
wcov <- covariances %*% weights
portVar <- (t(weights) %*% wcov)[1,1]
portSD <- sqrt(portVar)
betas <- wcov / portVar
dslnex <- function(x) {
y <- numeric(2)
y[1] <- x[1]^2 + x[2]^2 - 2
y[2] <- exp(x[1]-1) + x[2]^3 - 2
y
}
jacdsln <- function(x) {
n <- length(x)
Df <- matrix(numeric(n*n),n,n)
Df[1,1] <- 2*x[1]
Df[1,2] <- 2*x[2]
Df[2,1] <- exp(x[1]-1)
Df[2,2] <- 3*x[2]^2
Df
}
BADjacdsln <- function(x) {
n <- length(x)
Df <- matrix(numeric(n*n),n,n)
Df[1,1] <- 4*x[1]
Df[1,2] <- 2*x[2]
Df[2,1] <- exp(x[1]-1)
Df[2,2] <- 5*x[2]^2
Df
}
xstart <- c(2,0.5)
fstart <- dslnex(xstart)
xstart
fstart
nleqslv(xstart, dslnex, control=list(btol=.01))
nleqslv(xstart, dslnex, control=list(trace=1,btol=.01,delta=-1.0))
nleqslv(xstart, dslnex, control=list(trace=1,btol=.01,delta=-2.0))
z <- nleqslv(xstart, dslnex, jacobian=TRUE,control=list(btol=.01))
z$x
z$jac
jacdsln(z$x)
xstart <- c(0.5,2)
z <- nleqslv(xstart, dslnex, jacobian=TRUE,control=list(btol=.01))
z$x
z$jac
jacdsln(z$x)
install.packages("devtools")
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
shiny::runApp('GitHub/portfolioRiskVis')
setwd("~/GitHub/portfolioRiskVis")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
Asset <- c("Commodities","Int'l Stocks","US Stocks","Corp. Bonds","TIPS","Treasuries"
)
Volatility <- c(0.3, .2, .2, .12, .1, .07)
Expected_Return <- c(0.05, .07, .08, .03, .01, .02)
volDF <- data.frame(cbind(Volatility, Expected_Return))
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.15, 0.1, 0.2, 0.1, 0.1),
c(0.15, 1, 0.7, 0.35, 0.1, 0.1),
c(0.1, 0.7, 1, 0.35, 0.1, 0.1),
c(0.2, 0.35, 0.35, 1, 0.65, 0.6),
c(0.1, 0.1, 0.1, 0.65, 1, 0.95),
c(0.1, 0.1, 0.1, 0.6, 0.95, 1)), nrow = 6)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
minVar <- ((solve(covariances)%*%rep(1, 6))[,1]/sum(solve(covariances)%*%rep(1, 6)))*100
portfoliominVar <- sum(minVar)
weightsminVar <- minVar
return_minVar <- weightsminVar * Expected_Return
portfolio_returnminVar  <- sum(return_minVar)
contributionsminVar <- weightsminVar * (covariances %*% weightsminVar)
portfolio_varianceminVar <- sum(contributionsminVar)
portfolio_stdminVar <- sqrt(portfolio_varianceminVar)
plot(portfolio_stdminVar, portfolio_returnminVar, pch = "P", cex = 3, col = "red",
xlim = c(0, .35), ylim = c(0, 0.1), xlab = "Volatility
\n (Annualized standard deviation)", xaxt = "n", ylab = "Expected Return",
yaxt = "n", main = "Portfolio Expected Return \n vs. Risk", ps = 12,
cex.main = 1.5, mar = c(4,14,0.5,0.5) + .1,
oma = c(4,4,0.5,0.5) + .1)
points(Volatility, Expected_Return, pch = 19)
text(Volatility, Expected_Return, labels=Asset, cex= 1., pos=4)
axis(1, at = rrLabelsX, lab=paste0(rrLabelsX * 100, " %"), las=TRUE)
axis(2, at = rrLabelsY, lab=paste0(rrLabelsY * 100, " %"), las=TRUE)
plot(portfolio_stdminVar, portfolio_returnminVar, pch = "P", cex = 3, col = "red",
xlim = c(0, .35), ylim = c(0, 0.1), xlab = "Volatility
\n (Annualized standard deviation)", xaxt = "n", ylab = "Expected Return",
yaxt = "n", main = "Portfolio Expected Return \n vs. Risk", ps = 12,
cex.main = 1.5, mar = c(4,14,0.5,0.5) + .1,
oma = c(4,4,0.5,0.5) + .1)
plot(portfolio_stdminVar, portfolio_returnminVar, pch = "P", cex = 3, col = "red",
xlim = c(-0.05, .35), ylim = c(0, 0.1), xlab = "Volatility
\n (Annualized standard deviation)", xaxt = "n", ylab = "Expected Return",
yaxt = "n", main = "Portfolio Expected Return \n vs. Risk", ps = 12,
cex.main = 1.5, mar = c(4,14,0.5,0.5) + .1,
oma = c(4,4,0.5,0.5) + .1)
points(Volatility, Expected_Return, pch = 19)
# server.R
Asset <- c("Commodities","Int'l Stocks","US Stocks","Corp. Bonds","TIPS","Treasuries"
)
Volatility <- c(0.3, .2, .2, .12, .1, .07)
Expected_Return <- c(0.05, .07, .08, .03, .01, .02)
volDF <- data.frame(cbind(Volatility, Expected_Return))
rownames(volDF) <- Asset
correlations <- matrix(cbind(c(1, 0.15, 0.1, 0.2, 0.1, 0.1),
c(0.15, 1, 0.7, 0.35, 0.1, 0.1),
c(0.1, 0.7, 1, 0.35, 0.1, 0.1),
c(0.2, 0.35, 0.35, 1, 0.65, 0.6),
c(0.1, 0.1, 0.1, 0.65, 1, 0.95),
c(0.1, 0.1, 0.1, 0.6, 0.95, 1)), nrow = 6)
colnames(correlations) <- Asset
rownames(correlations) <- Asset
covariances <- correlations * (Volatility %*% t(Volatility))
maxSharpe <- (solve(covariances, Expected_Return)/sum(solve(covariances, Expected_Return)))*100
minVar <- ((solve(covariances)%*%rep(1, 6))[,1]/sum(solve(covariances)%*%rep(1, 6)))*100
riskParity <- c(9.793631429, 11.55770231, 11.83821891, 15.69868122, 20.8564412,
30.25532493)
# add RP vectors and values
portfolioRP <- sum(riskParity)
weightsRP <- riskParity
return_RP <- weightsRP * Expected_Return
portfolio_returnRP  <- sum(return_RP)/100
contributionsRP <- weightsRP * (covariances %*% weightsRP)
portfolio_varianceRP <- sum(contributionsRP)
portfolio_stdRP <- sqrt(portfolio_varianceRP)/100
risk_contributionsRP <- contributionsRP/portfolio_varianceRP
# add MinVar vectors and values
portfoliominVar <- sum(minVar)
weightsminVar <- minVar
return_minVar <- weightsminVar * Expected_Return
portfolio_returnminVar  <- sum(return_minVar)/100
contributionsminVar <- weightsminVar * (covariances %*% weightsminVar)
portfolio_varianceminVar <- sum(contributionsminVar)
portfolio_stdminVar <- sqrt(portfolio_varianceminVar)/100
risk_contributionsminVar <- contributionsminVar/portfolio_varianceminVar
# add maxSharpe vectors and values
portfoliomaxSharpe <- sum(maxSharpe)
weightsmaxSharpe <- maxSharpe
return_maxSharpe <- weightsmaxSharpe * Expected_Return
portfolio_returnmaxSharpe  <- sum(return_maxSharpe)
contributionsmaxSharpe <- weightsmaxSharpe * (covariances %*% weightsmaxSharpe)
portfolio_variancemaxSharpe <- sum(contributionsmaxSharpe)
portfolio_stdmaxSharpe <- sqrt(portfolio_variancemaxSharpe)
risk_contributionsmaxSharpe <- contributionsmaxSharpe/portfolio_variancemaxSharpe
par(mfcol = c(1,3), oma = c(0.5, 5, 0.5, 0.5))
barplot(t(weightsRP), horiz = TRUE, main = "Weight", ps = 12,
cex.main = 1.5, xaxt = "n", col = "white", yaxt = "n",
mar = c(4, 20, 0.5, 0.5) + .1)
axis(1, at = axisLabels, lab=paste0(axisLabels * 100, " %"),
las=TRUE, cex.axis=1, padj = 0.5)
axis(2, at=c(0.85,2,3.15,4.3,5.45,6.5), lab = Asset , las=TRUE, lty = 0,
ps = 12, cex.axis = 1.5)
barplot(t(risk_contributionsRP),
main = "Risk Contribution", ps = 12, cex.main = 1.5, col = "red", xaxt = "n",
yaxt = "n", horiz = TRUE, mar = c(4, 0.5, 0.5, 0.5) + .1)
axis(1, at = axisLabels, lab=paste0(axisLabels * 100, " %"),
las=TRUE, cex.axis=1, padj = 0.5)
barplot(t(return_RP),
main = "Return Contribution", ps = 12, cex.main = 1.5, col = "black", xaxt = "n",
yaxt = "n", horiz = TRUE, mar = c(4, 0.5, 0.5, 0.5) + .1)
axis(1, at = returnLabels, lab=paste0(returnLabels * 100, " %"),
las=TRUE, cex.axis=1, padj = 0.5)
plot(portfolio_stdRP, portfolio_returnRP, pch = "P", cex = 3, col = "red",
xlim = c(0, .35), ylim = c(0, 0.1), xlab = "Volatility
\n (Annualized standard deviation)", xaxt = "n", ylab = "Expected Return",
yaxt = "n", main = "Portfolio Expected Return \n vs. Risk", ps = 12,
cex.main = 1.5, mar = c(4,14,0.5,0.5) + .1,
oma = c(4,4,0.5,0.5) + .1)
plot(portfolio_stdminVar, portfolio_returnminVar, pch = "P", cex = 3, col = "red",
xlim = c(-0.05, .35), ylim = c(0, 0.1), xlab = "Volatility
\n (Annualized standard deviation)", xaxt = "n", ylab = "Expected Return",
yaxt = "n", main = "Portfolio Expected Return \n vs. Risk", ps = 12,
cex.main = 1.5, mar = c(4,14,0.5,0.5) + .1,
oma = c(4,4,0.5,0.5) + .1)
plot(portfolio_stdminVar, portfolio_returnminVar, pch = "P", cex = 3, col = "red",
xlim = c(-0.05, .35), ylim = c(0, 0.1), xlab = "Volatility
\n (Annualized standard deviation)", xaxt = "n", ylab = "Expected Return",
yaxt = "n", main = "Portfolio Expected Return \n vs. Risk", ps = 12,
cex.main = 1.5, mar = c(4,14,0.5,0.5) + .1,
oma = c(4,4,0.5,0.5) + .1)
points(Volatility, Expected_Return, pch = 19)
text(Volatility, Expected_Return, labels=Asset, cex= 1., pos=4)
axis(1, at = rrLabelsX, lab=paste0(rrLabelsX * 100, " %"), las=TRUE)
axis(2, at = rrLabelsY, lab=paste0(rrLabelsY * 100, " %"), las=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
